using UnityEngine;
using System.Collections;
using System.IO;

public class TurnInfo : MasterScript
{
	[HideInInspector]
	public int GP, raceGP, science, industry, money, planetsColonisedThisTurn, savedIterator;
	public float raceScience, raceIndustry, raceMoney;
	[HideInInspector]
	public string[,] planetRIM = new string[12,5];
	public string[,] mostPowerfulPlanets = new string[211,3];
	[HideInInspector]
	public GameObject[] systemList = new GameObject[60];
	[HideInInspector]
	public GameObject[] ownedSystems = new GameObject[60];
	public bool endTurn;
	public Camera mainCamera;
	public Material nereidesMaterial, humansMaterial, selkiesMaterial;
	public Material materialInUse;
	
	public string playerRace, homeSystem;
	public int turn = 0, systemsInPlay = 0;

	void Start()
	{			
		systemList = GameObject.FindGameObjectsWithTag("StarSystem");

		LoadPlanetData();
	}
	
	void LoadPlanetData() //Loads up planet stats into array
	{
		string text = " ";

		using(StreamReader reader =  new StreamReader("PlanetRIMData.txt"))
		{
			for(int i = 0; i < 12; i++)
			{
				for(int j = 0; j < 5; j++)
				{
					text = reader.ReadLine();
					planetRIM[i,j] = text;
				}
			}			
		}

		RefreshPlanetPower();
	}

	public void RefreshPlanetPower()
	{
		savedIterator = 0;

		foreach(GameObject system in systemList)
		{
			guiPlanScript = system.GetComponent<GUISystemDataScript>();
			
			guiPlanScript.UpdatePlanetPowerArray();
		}
	}

	public void PickRace() //Start of turn function. Race choice dictates starting planet and inherent bonuses as well as racial technologies.
	{
		if(playerRace == "Humans")
		{
			raceScience = 1;
			raceIndustry = 1;
			raceMoney = 2;
			raceGP = 3;
			homeSystem = "Sol";
			materialInUse = turnInfoScript.humansMaterial;
		}
		if(playerRace == "Selkies")
		{
			raceScience = 1;
			raceIndustry = 3;
			raceMoney = 2;
			raceGP = 2;
			homeSystem = "Heracles";
			materialInUse = turnInfoScript.selkiesMaterial;
		}
		if(playerRace == "Nereides")
		{
			raceScience = 6;
			raceIndustry = 2;
			raceMoney = 4;
			raceGP = 1;
			homeSystem = "Nepthys";
			materialInUse = turnInfoScript.nereidesMaterial;
		}
	}

	public void StartSystemPlanetColonise(Material playerMaterial, string homeSystem, GameObject[] thisSystemArray)
	{
		guiPlanScript = GameObject.Find (homeSystem).GetComponent<GUISystemDataScript>();
		
		for(int i = 0; i < 60; i++) //Find selected system and set it to owned
		{
			if(turnInfoScript.systemList[i] == GameObject.Find (homeSystem))
			{
				thisSystemArray[i] = turnInfoScript.systemList[i];

				thisSystemArray[i].renderer.material = playerMaterial;

				++systemsInPlay;

				break;
			}
		}
		
		for(int i = 0; i < guiPlanScript.numPlanets; ++i) //Colonise ocean planet (earth).
		{
			if(guiPlanScript.planNameOwnImprov[i,0] == "Ocean")
			{
				guiPlanScript.planNameOwnImprov[i,1] = "Yes";
				break;
			}
		}

		guiPlanScript.CheckOwnership();
	}

	public void TurnEnd(GameObject[] systems) //This function accumulates all the SIM generated by each system to give an empire SIM value
	{		
		endTurn = true;

		foreach(GameObject system in systems)
		{
			if(system == null)
			{
				continue;
			}

			lineRenderScript = system.GetComponent<LineRenderScript>();

			if(lineRenderScript.ownedBy == null || lineRenderScript.ownedBy == "")
			{
				continue;
			}

			if(system != null)
			{
				guiPlanScript = system.GetComponent<GUISystemDataScript>();
				techTreeScript = system.GetComponent<TechTreeScript>();
				heroScript = system.GetComponent<HeroScriptParent>();

				techTreeScript.ActiveTechnologies();
				guiPlanScript.SystemSIMCounter();
				guiPlanScript.CheckUnlockedTier();

				science += (int)guiPlanScript.totalSystemScience;
				industry += (int)guiPlanScript.totalSystemIndustry;
				money += (int)guiPlanScript.totalSystemMoney;
			}
		}

		turnInfoScript.SortSystemPower();
		
		GP += raceGP;

		planetsColonisedThisTurn = 0;

		endTurn = false;
	}

	public void SortSystemPower()
	{
		int i, j; 
		string[] temp = new string[3];

		for(i = 210; i >= 0; --i)
		{
			bool swaps = false;

			for(j = 1; j <= i; ++j)
			{
				if(float.Parse (mostPowerfulPlanets[j-1, 2]) < float.Parse (mostPowerfulPlanets[j, 2]))
				{
					temp[0] = mostPowerfulPlanets[j-1, 0];
					temp[1] = mostPowerfulPlanets[j-1, 1].ToString();
					temp[2] = mostPowerfulPlanets[j-1, 2].ToString();

					mostPowerfulPlanets[j-1, 0] = mostPowerfulPlanets[j, 0];
					mostPowerfulPlanets[j-1, 1] = mostPowerfulPlanets[j, 1];
					mostPowerfulPlanets[j-1, 2] = mostPowerfulPlanets[j, 2];

					mostPowerfulPlanets[j, 0] = temp[0];
					mostPowerfulPlanets[j, 1] = temp[1];
					mostPowerfulPlanets[j, 2] = temp[2];

					swaps = true;
				}
			}

			if(swaps == false)
			{
				break;
			}
		}
	}
}
